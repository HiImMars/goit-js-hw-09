{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SACrCC,EAAU,CACdC,SAAU,gBACVC,SAAU,OACVC,aAAc,OACdC,QAAS,IACTC,cAAc,EACdC,kBAAmB,eAKrB,SAASC,EAAcN,EAAUO,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAET,WAAUO,UAEpBG,EAAO,CAAEV,WAAUO,S,GAEpBA,E,IAXPX,EAAYmB,iBAAiB,UAe7B,SAAmBC,GACjBA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAeC,OAAOJ,EAAMK,OAC5BC,EAAcF,OAAOH,EAAKI,OAC1BE,EAAgBH,OAAOF,EAAOG,QAG9BH,GAAU,GAAKF,EAAQ,GAAKC,EAAO,IACrCO,EAAAnC,GAASoC,OAAOC,QAAS,sCAG3B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAeI,GAAK,EAGvC1B,EAFW0B,EAEaR,GACrBS,MAAK,SAAAC,G,IAAGlC,EAAQkC,EAARlC,SAAUO,EAAK2B,EAAL3B,M,OACjBsB,EAAAnC,GAASoC,OAAOK,QACd,uBAAwCC,OAAfpC,EAAS,QAAYoC,OAAN7B,EAAM,MAC5CR,E,IAGLsC,OAAM,SAAAH,G,IAAGlC,EAAQkC,EAARlC,SAAUO,EAAK2B,EAAL3B,MAClBsB,EAAAnC,GAASoC,OAAOC,QACd,sBAAqCK,OAAfpC,EAAS,QAAYoC,OAAN7B,EAAM,MAC3CR,E,IAGNyB,GAAgBG,EAElBX,EAAMG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst promiseForm = document.querySelector('.form');\nconst options = {\n  position: 'center-bottom',\n  distance: '15px',\n  borderRadius: '15px',\n  timeout: 8000,\n  clickToClose: true,\n  cssAnimationStyle: 'from-bottom',\n};\n\npromiseForm.addEventListener('submit', onPromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromise(event) {\n  event.preventDefault();\n  // console.log(event.currentTarget.elements.amount.value);\n  const { delay, step, amount } = event.currentTarget.elements;\n  let promiseDelay = Number(delay.value);\n  let promiseStep = Number(step.value);\n  let promiseAmount = Number(amount.value);\n  let position = 0;\n\n  if (amount <= 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.failure(` Please input correct values (>=0)`);\n  }\n\n  for (let i = 0; i <= promiseAmount; i += 1) {\n    position = i;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) =>\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          options\n        )\n      )\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          options\n        );\n      });\n    promiseDelay += promiseStep;\n  }\n  event.currentTarget.reset();\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$promiseForm","document","querySelector","$ce04d3a99e08e73b$var$options","position","distance","borderRadius","timeout","clickToClose","cssAnimationStyle","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","promiseDelay","Number","value","promiseStep","promiseAmount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.c2986191.js.map"}